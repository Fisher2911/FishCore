/*
 * MIT License
 *
 * Copyright (c) 2021 Fisher2911
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'signing'
    id 'maven-publish'
}

group 'io.github.Fisher2911'
version '1.0.0'

repositories {
    mavenCentral()
    maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { url "https://papermc.io/repo/repository/maven-public/" }
    maven { url = 'https://repo.aikar.co/content/groups/aikar/' }
    maven { url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
    maven {
        name = "sonatype-oss-snapshots"
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.17-R0.1-SNAPSHOT'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    compileOnly 'org.jetbrains:annotations:22.0.0'
    implementation 'net.kyori:adventure-api:4.9.2'
    implementation 'co.aikar:taskchain-bukkit:3.7.2'
    implementation "net.kyori:adventure-text-minimessage:4.2.0-SNAPSHOT"
    implementation "net.kyori:adventure-platform-bukkit:4.0.0"
}


apply plugin: 'com.github.johnrengelman.shadow'

test {
    useJUnitPlatform()
}

shadowJar {
    relocate 'co.aikar.taskchain', 'io.github.fisher2911.hmcutils.taskchain'
}

shadowJar {
    archiveBaseName.set('FishCore')
    archiveClassifier.set('')
    archiveVersion.set('')
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'io.github.Fisher2911'
            artifactId 'FishCore'
            version '1.0.0'

            from components.java

            // create the sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Serialize and Deserialize Json-LD into Java entities'
            name 'FishCore'
            url 'https://github.com/Fisher2911/FishCore'
            organization {
                name 'io.github.Fisher2911'
                url 'https://github.com/Fisher2911/FishCore'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/Fisher2911/FishCore'
            }
            licenses {
                license {
                    name 'MIT License'
                    url 'https://github.com/Fisher2911/FishCore/blob/master/LICENSE.txt'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/Fisher2911/FishCore'
                connection 'scm:git:git://github.com/Fisher2911/FishCore.git'
                developerConnection 'scm:git:ssh://git@github.com:Fisher2911/FishCore.git'
            }
            developers {
                developer {
                    name 'Fisher2911'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}